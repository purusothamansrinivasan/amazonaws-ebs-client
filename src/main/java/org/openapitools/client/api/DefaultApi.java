/*
 * Amazon Elastic Block Store
 * <p>You can use the Amazon Elastic Block Store (Amazon EBS) direct APIs to create Amazon EBS snapshots, write data directly to your snapshots, read data on your snapshots, and identify the differences or changes between two snapshots. If youâ€™re an independent software vendor (ISV) who offers backup services for Amazon EBS, the EBS direct APIs make it more efficient and cost-effective to track incremental changes on your Amazon EBS volumes through snapshots. This can be done without having to create new volumes from snapshots, and then use Amazon Elastic Compute Cloud (Amazon EC2) instances to compare the differences.</p> <p>You can create incremental snapshots directly from data on-premises into volumes and the cloud to use for quick disaster recovery. With the ability to write and read snapshots, you can write your on-premises data to an snapshot during a disaster. Then after recovery, you can restore it back to Amazon Web Services or on-premises from the snapshot. You no longer need to build and maintain complex mechanisms to copy data to and from Amazon EBS.</p> <p>This API reference provides detailed information about the actions, data types, parameters, and errors of the EBS direct APIs. For more information about the elements that make up the EBS direct APIs, and examples of how to use them effectively, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-accessing-snapshot.html\">Accessing the Contents of an Amazon EBS Snapshot</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas for the EBS direct APIs, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ebs-service.html\">Amazon Elastic Block Store Endpoints and Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2019-11-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CompleteSnapshotResponse;
import org.openapitools.client.model.GetSnapshotBlockResponse;
import org.openapitools.client.model.ListChangedBlocksResponse;
import org.openapitools.client.model.ListSnapshotBlocksResponse;
import org.openapitools.client.model.PutSnapshotBlockRequest;
import org.openapitools.client.model.StartSnapshotRequest;
import org.openapitools.client.model.StartSnapshotResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for completeSnapshot
     * @param snapshotId The ID of the snapshot. (required)
     * @param xAmzChangedBlocksCount The number of blocks that were written to the snapshot. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChecksum &lt;p&gt;An aggregated Base-64 SHA256 checksum based on the checksums of each written block.&lt;/p&gt; &lt;p&gt;To generate the aggregated checksum using the linear aggregation method, arrange the checksums for each written block in ascending order of their block index, concatenate them to form a single string, and then generate the checksum on the entire string using the SHA256 algorithm.&lt;/p&gt; (optional)
     * @param xAmzChecksumAlgorithm The algorithm used to generate the checksum. Currently, the only supported algorithm is &lt;code&gt;SHA256&lt;/code&gt;. (optional)
     * @param xAmzChecksumAggregationMethod The aggregation method used to generate the checksum. Currently, the only supported aggregation method is &lt;code&gt;LINEAR&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestThrottledException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completeSnapshotCall(@javax.annotation.Nonnull String snapshotId, @javax.annotation.Nonnull Integer xAmzChangedBlocksCount, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String xAmzChecksum, @javax.annotation.Nullable String xAmzChecksumAlgorithm, @javax.annotation.Nullable String xAmzChecksumAggregationMethod, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/snapshots/completion/{snapshotId}#x-amz-ChangedBlocksCount"
            .replace("{" + "snapshotId" + "}", localVarApiClient.escapeString(snapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzChangedBlocksCount != null) {
            localVarHeaderParams.put("x-amz-ChangedBlocksCount", localVarApiClient.parameterToString(xAmzChangedBlocksCount));
        }


        if (xAmzChecksum != null) {
            localVarHeaderParams.put("x-amz-Checksum", localVarApiClient.parameterToString(xAmzChecksum));
        }


        if (xAmzChecksumAlgorithm != null) {
            localVarHeaderParams.put("x-amz-Checksum-Algorithm", localVarApiClient.parameterToString(xAmzChecksumAlgorithm));
        }


        if (xAmzChecksumAggregationMethod != null) {
            localVarHeaderParams.put("x-amz-Checksum-Aggregation-Method", localVarApiClient.parameterToString(xAmzChecksumAggregationMethod));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call completeSnapshotValidateBeforeCall(@javax.annotation.Nonnull String snapshotId, @javax.annotation.Nonnull Integer xAmzChangedBlocksCount, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String xAmzChecksum, @javax.annotation.Nullable String xAmzChecksumAlgorithm, @javax.annotation.Nullable String xAmzChecksumAggregationMethod, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'snapshotId' is set
        if (snapshotId == null) {
            throw new ApiException("Missing the required parameter 'snapshotId' when calling completeSnapshot(Async)");
        }

        // verify the required parameter 'xAmzChangedBlocksCount' is set
        if (xAmzChangedBlocksCount == null) {
            throw new ApiException("Missing the required parameter 'xAmzChangedBlocksCount' when calling completeSnapshot(Async)");
        }

        return completeSnapshotCall(snapshotId, xAmzChangedBlocksCount, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChecksum, xAmzChecksumAlgorithm, xAmzChecksumAggregationMethod, _callback);

    }

    /**
     * 
     * &lt;p&gt;Seals and completes the snapshot after all of the required blocks of data have been written to it. Completing the snapshot changes the status to &lt;code&gt;completed&lt;/code&gt;. You cannot write new blocks to a snapshot after it has been completed.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You should always retry requests that receive server (&lt;code&gt;5xx&lt;/code&gt;) error responses, and &lt;code&gt;ThrottlingException&lt;/code&gt; and &lt;code&gt;RequestThrottledException&lt;/code&gt; client error responses. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html\&quot;&gt;Error retries&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param snapshotId The ID of the snapshot. (required)
     * @param xAmzChangedBlocksCount The number of blocks that were written to the snapshot. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChecksum &lt;p&gt;An aggregated Base-64 SHA256 checksum based on the checksums of each written block.&lt;/p&gt; &lt;p&gt;To generate the aggregated checksum using the linear aggregation method, arrange the checksums for each written block in ascending order of their block index, concatenate them to form a single string, and then generate the checksum on the entire string using the SHA256 algorithm.&lt;/p&gt; (optional)
     * @param xAmzChecksumAlgorithm The algorithm used to generate the checksum. Currently, the only supported algorithm is &lt;code&gt;SHA256&lt;/code&gt;. (optional)
     * @param xAmzChecksumAggregationMethod The aggregation method used to generate the checksum. Currently, the only supported aggregation method is &lt;code&gt;LINEAR&lt;/code&gt;. (optional)
     * @return CompleteSnapshotResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestThrottledException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerException </td><td>  -  </td></tr>
     </table>
     */
    public CompleteSnapshotResponse completeSnapshot(@javax.annotation.Nonnull String snapshotId, @javax.annotation.Nonnull Integer xAmzChangedBlocksCount, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String xAmzChecksum, @javax.annotation.Nullable String xAmzChecksumAlgorithm, @javax.annotation.Nullable String xAmzChecksumAggregationMethod) throws ApiException {
        ApiResponse<CompleteSnapshotResponse> localVarResp = completeSnapshotWithHttpInfo(snapshotId, xAmzChangedBlocksCount, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChecksum, xAmzChecksumAlgorithm, xAmzChecksumAggregationMethod);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Seals and completes the snapshot after all of the required blocks of data have been written to it. Completing the snapshot changes the status to &lt;code&gt;completed&lt;/code&gt;. You cannot write new blocks to a snapshot after it has been completed.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You should always retry requests that receive server (&lt;code&gt;5xx&lt;/code&gt;) error responses, and &lt;code&gt;ThrottlingException&lt;/code&gt; and &lt;code&gt;RequestThrottledException&lt;/code&gt; client error responses. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html\&quot;&gt;Error retries&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param snapshotId The ID of the snapshot. (required)
     * @param xAmzChangedBlocksCount The number of blocks that were written to the snapshot. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChecksum &lt;p&gt;An aggregated Base-64 SHA256 checksum based on the checksums of each written block.&lt;/p&gt; &lt;p&gt;To generate the aggregated checksum using the linear aggregation method, arrange the checksums for each written block in ascending order of their block index, concatenate them to form a single string, and then generate the checksum on the entire string using the SHA256 algorithm.&lt;/p&gt; (optional)
     * @param xAmzChecksumAlgorithm The algorithm used to generate the checksum. Currently, the only supported algorithm is &lt;code&gt;SHA256&lt;/code&gt;. (optional)
     * @param xAmzChecksumAggregationMethod The aggregation method used to generate the checksum. Currently, the only supported aggregation method is &lt;code&gt;LINEAR&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;CompleteSnapshotResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestThrottledException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompleteSnapshotResponse> completeSnapshotWithHttpInfo(@javax.annotation.Nonnull String snapshotId, @javax.annotation.Nonnull Integer xAmzChangedBlocksCount, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String xAmzChecksum, @javax.annotation.Nullable String xAmzChecksumAlgorithm, @javax.annotation.Nullable String xAmzChecksumAggregationMethod) throws ApiException {
        okhttp3.Call localVarCall = completeSnapshotValidateBeforeCall(snapshotId, xAmzChangedBlocksCount, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChecksum, xAmzChecksumAlgorithm, xAmzChecksumAggregationMethod, null);
        Type localVarReturnType = new TypeToken<CompleteSnapshotResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Seals and completes the snapshot after all of the required blocks of data have been written to it. Completing the snapshot changes the status to &lt;code&gt;completed&lt;/code&gt;. You cannot write new blocks to a snapshot after it has been completed.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You should always retry requests that receive server (&lt;code&gt;5xx&lt;/code&gt;) error responses, and &lt;code&gt;ThrottlingException&lt;/code&gt; and &lt;code&gt;RequestThrottledException&lt;/code&gt; client error responses. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html\&quot;&gt;Error retries&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param snapshotId The ID of the snapshot. (required)
     * @param xAmzChangedBlocksCount The number of blocks that were written to the snapshot. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChecksum &lt;p&gt;An aggregated Base-64 SHA256 checksum based on the checksums of each written block.&lt;/p&gt; &lt;p&gt;To generate the aggregated checksum using the linear aggregation method, arrange the checksums for each written block in ascending order of their block index, concatenate them to form a single string, and then generate the checksum on the entire string using the SHA256 algorithm.&lt;/p&gt; (optional)
     * @param xAmzChecksumAlgorithm The algorithm used to generate the checksum. Currently, the only supported algorithm is &lt;code&gt;SHA256&lt;/code&gt;. (optional)
     * @param xAmzChecksumAggregationMethod The aggregation method used to generate the checksum. Currently, the only supported aggregation method is &lt;code&gt;LINEAR&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestThrottledException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completeSnapshotAsync(@javax.annotation.Nonnull String snapshotId, @javax.annotation.Nonnull Integer xAmzChangedBlocksCount, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String xAmzChecksum, @javax.annotation.Nullable String xAmzChecksumAlgorithm, @javax.annotation.Nullable String xAmzChecksumAggregationMethod, final ApiCallback<CompleteSnapshotResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = completeSnapshotValidateBeforeCall(snapshotId, xAmzChangedBlocksCount, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChecksum, xAmzChecksumAlgorithm, xAmzChecksumAggregationMethod, _callback);
        Type localVarReturnType = new TypeToken<CompleteSnapshotResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSnapshotBlock
     * @param snapshotId &lt;p&gt;The ID of the snapshot containing the block from which to get data.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If the specified snapshot is encrypted, you must have permission to use the KMS key that was used to encrypt the snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebsapis-using-encryption.html\&quot;&gt; Using encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; (required)
     * @param blockIndex The block index of the block in which to read the data. A block index is a logical index in units of &lt;code&gt;512&lt;/code&gt; KiB blocks. To identify the block index, divide the logical offset of the data in the logical volume by the block size (logical offset of data/&lt;code&gt;524288&lt;/code&gt;). The logical offset of the data must be &lt;code&gt;512&lt;/code&gt; KiB aligned. (required)
     * @param blockToken The block token of the block from which to get data. You can obtain the &lt;code&gt;BlockToken&lt;/code&gt; by running the &lt;code&gt;ListChangedBlocks&lt;/code&gt; or &lt;code&gt;ListSnapshotBlocks&lt;/code&gt; operations. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestThrottledException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSnapshotBlockCall(@javax.annotation.Nonnull String snapshotId, @javax.annotation.Nonnull Integer blockIndex, @javax.annotation.Nonnull String blockToken, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/snapshots/{snapshotId}/blocks/{blockIndex}#blockToken"
            .replace("{" + "snapshotId" + "}", localVarApiClient.escapeString(snapshotId.toString()))
            .replace("{" + "blockIndex" + "}", localVarApiClient.escapeString(blockIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (blockToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blockToken", blockToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSnapshotBlockValidateBeforeCall(@javax.annotation.Nonnull String snapshotId, @javax.annotation.Nonnull Integer blockIndex, @javax.annotation.Nonnull String blockToken, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'snapshotId' is set
        if (snapshotId == null) {
            throw new ApiException("Missing the required parameter 'snapshotId' when calling getSnapshotBlock(Async)");
        }

        // verify the required parameter 'blockIndex' is set
        if (blockIndex == null) {
            throw new ApiException("Missing the required parameter 'blockIndex' when calling getSnapshotBlock(Async)");
        }

        // verify the required parameter 'blockToken' is set
        if (blockToken == null) {
            throw new ApiException("Missing the required parameter 'blockToken' when calling getSnapshotBlock(Async)");
        }

        return getSnapshotBlockCall(snapshotId, blockIndex, blockToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the data in a block in an Amazon Elastic Block Store snapshot.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You should always retry requests that receive server (&lt;code&gt;5xx&lt;/code&gt;) error responses, and &lt;code&gt;ThrottlingException&lt;/code&gt; and &lt;code&gt;RequestThrottledException&lt;/code&gt; client error responses. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html\&quot;&gt;Error retries&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param snapshotId &lt;p&gt;The ID of the snapshot containing the block from which to get data.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If the specified snapshot is encrypted, you must have permission to use the KMS key that was used to encrypt the snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebsapis-using-encryption.html\&quot;&gt; Using encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; (required)
     * @param blockIndex The block index of the block in which to read the data. A block index is a logical index in units of &lt;code&gt;512&lt;/code&gt; KiB blocks. To identify the block index, divide the logical offset of the data in the logical volume by the block size (logical offset of data/&lt;code&gt;524288&lt;/code&gt;). The logical offset of the data must be &lt;code&gt;512&lt;/code&gt; KiB aligned. (required)
     * @param blockToken The block token of the block from which to get data. You can obtain the &lt;code&gt;BlockToken&lt;/code&gt; by running the &lt;code&gt;ListChangedBlocks&lt;/code&gt; or &lt;code&gt;ListSnapshotBlocks&lt;/code&gt; operations. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetSnapshotBlockResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestThrottledException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerException </td><td>  -  </td></tr>
     </table>
     */
    public GetSnapshotBlockResponse getSnapshotBlock(@javax.annotation.Nonnull String snapshotId, @javax.annotation.Nonnull Integer blockIndex, @javax.annotation.Nonnull String blockToken, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetSnapshotBlockResponse> localVarResp = getSnapshotBlockWithHttpInfo(snapshotId, blockIndex, blockToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the data in a block in an Amazon Elastic Block Store snapshot.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You should always retry requests that receive server (&lt;code&gt;5xx&lt;/code&gt;) error responses, and &lt;code&gt;ThrottlingException&lt;/code&gt; and &lt;code&gt;RequestThrottledException&lt;/code&gt; client error responses. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html\&quot;&gt;Error retries&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param snapshotId &lt;p&gt;The ID of the snapshot containing the block from which to get data.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If the specified snapshot is encrypted, you must have permission to use the KMS key that was used to encrypt the snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebsapis-using-encryption.html\&quot;&gt; Using encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; (required)
     * @param blockIndex The block index of the block in which to read the data. A block index is a logical index in units of &lt;code&gt;512&lt;/code&gt; KiB blocks. To identify the block index, divide the logical offset of the data in the logical volume by the block size (logical offset of data/&lt;code&gt;524288&lt;/code&gt;). The logical offset of the data must be &lt;code&gt;512&lt;/code&gt; KiB aligned. (required)
     * @param blockToken The block token of the block from which to get data. You can obtain the &lt;code&gt;BlockToken&lt;/code&gt; by running the &lt;code&gt;ListChangedBlocks&lt;/code&gt; or &lt;code&gt;ListSnapshotBlocks&lt;/code&gt; operations. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetSnapshotBlockResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestThrottledException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSnapshotBlockResponse> getSnapshotBlockWithHttpInfo(@javax.annotation.Nonnull String snapshotId, @javax.annotation.Nonnull Integer blockIndex, @javax.annotation.Nonnull String blockToken, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getSnapshotBlockValidateBeforeCall(snapshotId, blockIndex, blockToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetSnapshotBlockResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the data in a block in an Amazon Elastic Block Store snapshot.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You should always retry requests that receive server (&lt;code&gt;5xx&lt;/code&gt;) error responses, and &lt;code&gt;ThrottlingException&lt;/code&gt; and &lt;code&gt;RequestThrottledException&lt;/code&gt; client error responses. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html\&quot;&gt;Error retries&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param snapshotId &lt;p&gt;The ID of the snapshot containing the block from which to get data.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If the specified snapshot is encrypted, you must have permission to use the KMS key that was used to encrypt the snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebsapis-using-encryption.html\&quot;&gt; Using encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; (required)
     * @param blockIndex The block index of the block in which to read the data. A block index is a logical index in units of &lt;code&gt;512&lt;/code&gt; KiB blocks. To identify the block index, divide the logical offset of the data in the logical volume by the block size (logical offset of data/&lt;code&gt;524288&lt;/code&gt;). The logical offset of the data must be &lt;code&gt;512&lt;/code&gt; KiB aligned. (required)
     * @param blockToken The block token of the block from which to get data. You can obtain the &lt;code&gt;BlockToken&lt;/code&gt; by running the &lt;code&gt;ListChangedBlocks&lt;/code&gt; or &lt;code&gt;ListSnapshotBlocks&lt;/code&gt; operations. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestThrottledException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSnapshotBlockAsync(@javax.annotation.Nonnull String snapshotId, @javax.annotation.Nonnull Integer blockIndex, @javax.annotation.Nonnull String blockToken, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<GetSnapshotBlockResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSnapshotBlockValidateBeforeCall(snapshotId, blockIndex, blockToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetSnapshotBlockResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listChangedBlocks
     * @param secondSnapshotId &lt;p&gt;The ID of the second snapshot to use for the comparison.&lt;/p&gt; &lt;important&gt; &lt;p&gt;The &lt;code&gt;SecondSnapshotId&lt;/code&gt; parameter must be specified with a &lt;code&gt;FirstSnapshotID&lt;/code&gt; parameter; otherwise, an error occurs.&lt;/p&gt; &lt;/important&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param firstSnapshotId &lt;p&gt;The ID of the first snapshot to use for the comparison.&lt;/p&gt; &lt;important&gt; &lt;p&gt;The &lt;code&gt;FirstSnapshotID&lt;/code&gt; parameter must be specified with a &lt;code&gt;SecondSnapshotId&lt;/code&gt; parameter; otherwise, an error occurs.&lt;/p&gt; &lt;/important&gt; (optional)
     * @param pageToken &lt;p&gt;The token to request the next page of results.&lt;/p&gt; &lt;p&gt;If you specify &lt;b&gt;NextToken&lt;/b&gt;, then &lt;b&gt;StartingBlockIndex&lt;/b&gt; is ignored.&lt;/p&gt; (optional)
     * @param maxResults &lt;p&gt;The maximum number of blocks to be returned by the request.&lt;/p&gt; &lt;p&gt;Even if additional blocks can be retrieved from the snapshot, the request can return less blocks than &lt;b&gt;MaxResults&lt;/b&gt; or an empty array of blocks.&lt;/p&gt; &lt;p&gt;To retrieve the next set of blocks from the snapshot, make another request with the returned &lt;b&gt;NextToken&lt;/b&gt; value. The value of &lt;b&gt;NextToken&lt;/b&gt; is &lt;code&gt;null&lt;/code&gt; when there are no more blocks to return.&lt;/p&gt; (optional)
     * @param startingBlockIndex &lt;p&gt;The block index from which the comparison should start.&lt;/p&gt; &lt;p&gt;The list in the response will start from this block index or the next valid block index in the snapshots.&lt;/p&gt; &lt;p&gt;If you specify &lt;b&gt;NextToken&lt;/b&gt;, then &lt;b&gt;StartingBlockIndex&lt;/b&gt; is ignored.&lt;/p&gt; (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestThrottledException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChangedBlocksCall(@javax.annotation.Nonnull String secondSnapshotId, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String firstSnapshotId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable Integer maxResults, @javax.annotation.Nullable Integer startingBlockIndex, @javax.annotation.Nullable String maxResults2, @javax.annotation.Nullable String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/snapshots/{secondSnapshotId}/changedblocks"
            .replace("{" + "secondSnapshotId" + "}", localVarApiClient.escapeString(secondSnapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (firstSnapshotId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstSnapshotId", firstSnapshotId));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (startingBlockIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingBlockIndex", startingBlockIndex));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChangedBlocksValidateBeforeCall(@javax.annotation.Nonnull String secondSnapshotId, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String firstSnapshotId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable Integer maxResults, @javax.annotation.Nullable Integer startingBlockIndex, @javax.annotation.Nullable String maxResults2, @javax.annotation.Nullable String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'secondSnapshotId' is set
        if (secondSnapshotId == null) {
            throw new ApiException("Missing the required parameter 'secondSnapshotId' when calling listChangedBlocks(Async)");
        }

        return listChangedBlocksCall(secondSnapshotId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, firstSnapshotId, pageToken, maxResults, startingBlockIndex, maxResults2, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about the blocks that are different between two Amazon Elastic Block Store snapshots of the same volume/snapshot lineage.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You should always retry requests that receive server (&lt;code&gt;5xx&lt;/code&gt;) error responses, and &lt;code&gt;ThrottlingException&lt;/code&gt; and &lt;code&gt;RequestThrottledException&lt;/code&gt; client error responses. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html\&quot;&gt;Error retries&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param secondSnapshotId &lt;p&gt;The ID of the second snapshot to use for the comparison.&lt;/p&gt; &lt;important&gt; &lt;p&gt;The &lt;code&gt;SecondSnapshotId&lt;/code&gt; parameter must be specified with a &lt;code&gt;FirstSnapshotID&lt;/code&gt; parameter; otherwise, an error occurs.&lt;/p&gt; &lt;/important&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param firstSnapshotId &lt;p&gt;The ID of the first snapshot to use for the comparison.&lt;/p&gt; &lt;important&gt; &lt;p&gt;The &lt;code&gt;FirstSnapshotID&lt;/code&gt; parameter must be specified with a &lt;code&gt;SecondSnapshotId&lt;/code&gt; parameter; otherwise, an error occurs.&lt;/p&gt; &lt;/important&gt; (optional)
     * @param pageToken &lt;p&gt;The token to request the next page of results.&lt;/p&gt; &lt;p&gt;If you specify &lt;b&gt;NextToken&lt;/b&gt;, then &lt;b&gt;StartingBlockIndex&lt;/b&gt; is ignored.&lt;/p&gt; (optional)
     * @param maxResults &lt;p&gt;The maximum number of blocks to be returned by the request.&lt;/p&gt; &lt;p&gt;Even if additional blocks can be retrieved from the snapshot, the request can return less blocks than &lt;b&gt;MaxResults&lt;/b&gt; or an empty array of blocks.&lt;/p&gt; &lt;p&gt;To retrieve the next set of blocks from the snapshot, make another request with the returned &lt;b&gt;NextToken&lt;/b&gt; value. The value of &lt;b&gt;NextToken&lt;/b&gt; is &lt;code&gt;null&lt;/code&gt; when there are no more blocks to return.&lt;/p&gt; (optional)
     * @param startingBlockIndex &lt;p&gt;The block index from which the comparison should start.&lt;/p&gt; &lt;p&gt;The list in the response will start from this block index or the next valid block index in the snapshots.&lt;/p&gt; &lt;p&gt;If you specify &lt;b&gt;NextToken&lt;/b&gt;, then &lt;b&gt;StartingBlockIndex&lt;/b&gt; is ignored.&lt;/p&gt; (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListChangedBlocksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestThrottledException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerException </td><td>  -  </td></tr>
     </table>
     */
    public ListChangedBlocksResponse listChangedBlocks(@javax.annotation.Nonnull String secondSnapshotId, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String firstSnapshotId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable Integer maxResults, @javax.annotation.Nullable Integer startingBlockIndex, @javax.annotation.Nullable String maxResults2, @javax.annotation.Nullable String nextToken) throws ApiException {
        ApiResponse<ListChangedBlocksResponse> localVarResp = listChangedBlocksWithHttpInfo(secondSnapshotId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, firstSnapshotId, pageToken, maxResults, startingBlockIndex, maxResults2, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about the blocks that are different between two Amazon Elastic Block Store snapshots of the same volume/snapshot lineage.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You should always retry requests that receive server (&lt;code&gt;5xx&lt;/code&gt;) error responses, and &lt;code&gt;ThrottlingException&lt;/code&gt; and &lt;code&gt;RequestThrottledException&lt;/code&gt; client error responses. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html\&quot;&gt;Error retries&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param secondSnapshotId &lt;p&gt;The ID of the second snapshot to use for the comparison.&lt;/p&gt; &lt;important&gt; &lt;p&gt;The &lt;code&gt;SecondSnapshotId&lt;/code&gt; parameter must be specified with a &lt;code&gt;FirstSnapshotID&lt;/code&gt; parameter; otherwise, an error occurs.&lt;/p&gt; &lt;/important&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param firstSnapshotId &lt;p&gt;The ID of the first snapshot to use for the comparison.&lt;/p&gt; &lt;important&gt; &lt;p&gt;The &lt;code&gt;FirstSnapshotID&lt;/code&gt; parameter must be specified with a &lt;code&gt;SecondSnapshotId&lt;/code&gt; parameter; otherwise, an error occurs.&lt;/p&gt; &lt;/important&gt; (optional)
     * @param pageToken &lt;p&gt;The token to request the next page of results.&lt;/p&gt; &lt;p&gt;If you specify &lt;b&gt;NextToken&lt;/b&gt;, then &lt;b&gt;StartingBlockIndex&lt;/b&gt; is ignored.&lt;/p&gt; (optional)
     * @param maxResults &lt;p&gt;The maximum number of blocks to be returned by the request.&lt;/p&gt; &lt;p&gt;Even if additional blocks can be retrieved from the snapshot, the request can return less blocks than &lt;b&gt;MaxResults&lt;/b&gt; or an empty array of blocks.&lt;/p&gt; &lt;p&gt;To retrieve the next set of blocks from the snapshot, make another request with the returned &lt;b&gt;NextToken&lt;/b&gt; value. The value of &lt;b&gt;NextToken&lt;/b&gt; is &lt;code&gt;null&lt;/code&gt; when there are no more blocks to return.&lt;/p&gt; (optional)
     * @param startingBlockIndex &lt;p&gt;The block index from which the comparison should start.&lt;/p&gt; &lt;p&gt;The list in the response will start from this block index or the next valid block index in the snapshots.&lt;/p&gt; &lt;p&gt;If you specify &lt;b&gt;NextToken&lt;/b&gt;, then &lt;b&gt;StartingBlockIndex&lt;/b&gt; is ignored.&lt;/p&gt; (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListChangedBlocksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestThrottledException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListChangedBlocksResponse> listChangedBlocksWithHttpInfo(@javax.annotation.Nonnull String secondSnapshotId, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String firstSnapshotId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable Integer maxResults, @javax.annotation.Nullable Integer startingBlockIndex, @javax.annotation.Nullable String maxResults2, @javax.annotation.Nullable String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listChangedBlocksValidateBeforeCall(secondSnapshotId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, firstSnapshotId, pageToken, maxResults, startingBlockIndex, maxResults2, nextToken, null);
        Type localVarReturnType = new TypeToken<ListChangedBlocksResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about the blocks that are different between two Amazon Elastic Block Store snapshots of the same volume/snapshot lineage.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You should always retry requests that receive server (&lt;code&gt;5xx&lt;/code&gt;) error responses, and &lt;code&gt;ThrottlingException&lt;/code&gt; and &lt;code&gt;RequestThrottledException&lt;/code&gt; client error responses. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html\&quot;&gt;Error retries&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param secondSnapshotId &lt;p&gt;The ID of the second snapshot to use for the comparison.&lt;/p&gt; &lt;important&gt; &lt;p&gt;The &lt;code&gt;SecondSnapshotId&lt;/code&gt; parameter must be specified with a &lt;code&gt;FirstSnapshotID&lt;/code&gt; parameter; otherwise, an error occurs.&lt;/p&gt; &lt;/important&gt; (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param firstSnapshotId &lt;p&gt;The ID of the first snapshot to use for the comparison.&lt;/p&gt; &lt;important&gt; &lt;p&gt;The &lt;code&gt;FirstSnapshotID&lt;/code&gt; parameter must be specified with a &lt;code&gt;SecondSnapshotId&lt;/code&gt; parameter; otherwise, an error occurs.&lt;/p&gt; &lt;/important&gt; (optional)
     * @param pageToken &lt;p&gt;The token to request the next page of results.&lt;/p&gt; &lt;p&gt;If you specify &lt;b&gt;NextToken&lt;/b&gt;, then &lt;b&gt;StartingBlockIndex&lt;/b&gt; is ignored.&lt;/p&gt; (optional)
     * @param maxResults &lt;p&gt;The maximum number of blocks to be returned by the request.&lt;/p&gt; &lt;p&gt;Even if additional blocks can be retrieved from the snapshot, the request can return less blocks than &lt;b&gt;MaxResults&lt;/b&gt; or an empty array of blocks.&lt;/p&gt; &lt;p&gt;To retrieve the next set of blocks from the snapshot, make another request with the returned &lt;b&gt;NextToken&lt;/b&gt; value. The value of &lt;b&gt;NextToken&lt;/b&gt; is &lt;code&gt;null&lt;/code&gt; when there are no more blocks to return.&lt;/p&gt; (optional)
     * @param startingBlockIndex &lt;p&gt;The block index from which the comparison should start.&lt;/p&gt; &lt;p&gt;The list in the response will start from this block index or the next valid block index in the snapshots.&lt;/p&gt; &lt;p&gt;If you specify &lt;b&gt;NextToken&lt;/b&gt;, then &lt;b&gt;StartingBlockIndex&lt;/b&gt; is ignored.&lt;/p&gt; (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestThrottledException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChangedBlocksAsync(@javax.annotation.Nonnull String secondSnapshotId, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String firstSnapshotId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable Integer maxResults, @javax.annotation.Nullable Integer startingBlockIndex, @javax.annotation.Nullable String maxResults2, @javax.annotation.Nullable String nextToken, final ApiCallback<ListChangedBlocksResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChangedBlocksValidateBeforeCall(secondSnapshotId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, firstSnapshotId, pageToken, maxResults, startingBlockIndex, maxResults2, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListChangedBlocksResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSnapshotBlocks
     * @param snapshotId The ID of the snapshot from which to get block indexes and block tokens. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param pageToken &lt;p&gt;The token to request the next page of results.&lt;/p&gt; &lt;p&gt;If you specify &lt;b&gt;NextToken&lt;/b&gt;, then &lt;b&gt;StartingBlockIndex&lt;/b&gt; is ignored.&lt;/p&gt; (optional)
     * @param maxResults &lt;p&gt;The maximum number of blocks to be returned by the request.&lt;/p&gt; &lt;p&gt;Even if additional blocks can be retrieved from the snapshot, the request can return less blocks than &lt;b&gt;MaxResults&lt;/b&gt; or an empty array of blocks.&lt;/p&gt; &lt;p&gt;To retrieve the next set of blocks from the snapshot, make another request with the returned &lt;b&gt;NextToken&lt;/b&gt; value. The value of &lt;b&gt;NextToken&lt;/b&gt; is &lt;code&gt;null&lt;/code&gt; when there are no more blocks to return.&lt;/p&gt; (optional)
     * @param startingBlockIndex &lt;p&gt;The block index from which the list should start. The list in the response will start from this block index or the next valid block index in the snapshot.&lt;/p&gt; &lt;p&gt;If you specify &lt;b&gt;NextToken&lt;/b&gt;, then &lt;b&gt;StartingBlockIndex&lt;/b&gt; is ignored.&lt;/p&gt; (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestThrottledException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSnapshotBlocksCall(@javax.annotation.Nonnull String snapshotId, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable Integer maxResults, @javax.annotation.Nullable Integer startingBlockIndex, @javax.annotation.Nullable String maxResults2, @javax.annotation.Nullable String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/snapshots/{snapshotId}/blocks"
            .replace("{" + "snapshotId" + "}", localVarApiClient.escapeString(snapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (startingBlockIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingBlockIndex", startingBlockIndex));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSnapshotBlocksValidateBeforeCall(@javax.annotation.Nonnull String snapshotId, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable Integer maxResults, @javax.annotation.Nullable Integer startingBlockIndex, @javax.annotation.Nullable String maxResults2, @javax.annotation.Nullable String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'snapshotId' is set
        if (snapshotId == null) {
            throw new ApiException("Missing the required parameter 'snapshotId' when calling listSnapshotBlocks(Async)");
        }

        return listSnapshotBlocksCall(snapshotId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageToken, maxResults, startingBlockIndex, maxResults2, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about the blocks in an Amazon Elastic Block Store snapshot.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You should always retry requests that receive server (&lt;code&gt;5xx&lt;/code&gt;) error responses, and &lt;code&gt;ThrottlingException&lt;/code&gt; and &lt;code&gt;RequestThrottledException&lt;/code&gt; client error responses. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html\&quot;&gt;Error retries&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param snapshotId The ID of the snapshot from which to get block indexes and block tokens. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param pageToken &lt;p&gt;The token to request the next page of results.&lt;/p&gt; &lt;p&gt;If you specify &lt;b&gt;NextToken&lt;/b&gt;, then &lt;b&gt;StartingBlockIndex&lt;/b&gt; is ignored.&lt;/p&gt; (optional)
     * @param maxResults &lt;p&gt;The maximum number of blocks to be returned by the request.&lt;/p&gt; &lt;p&gt;Even if additional blocks can be retrieved from the snapshot, the request can return less blocks than &lt;b&gt;MaxResults&lt;/b&gt; or an empty array of blocks.&lt;/p&gt; &lt;p&gt;To retrieve the next set of blocks from the snapshot, make another request with the returned &lt;b&gt;NextToken&lt;/b&gt; value. The value of &lt;b&gt;NextToken&lt;/b&gt; is &lt;code&gt;null&lt;/code&gt; when there are no more blocks to return.&lt;/p&gt; (optional)
     * @param startingBlockIndex &lt;p&gt;The block index from which the list should start. The list in the response will start from this block index or the next valid block index in the snapshot.&lt;/p&gt; &lt;p&gt;If you specify &lt;b&gt;NextToken&lt;/b&gt;, then &lt;b&gt;StartingBlockIndex&lt;/b&gt; is ignored.&lt;/p&gt; (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListSnapshotBlocksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestThrottledException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerException </td><td>  -  </td></tr>
     </table>
     */
    public ListSnapshotBlocksResponse listSnapshotBlocks(@javax.annotation.Nonnull String snapshotId, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable Integer maxResults, @javax.annotation.Nullable Integer startingBlockIndex, @javax.annotation.Nullable String maxResults2, @javax.annotation.Nullable String nextToken) throws ApiException {
        ApiResponse<ListSnapshotBlocksResponse> localVarResp = listSnapshotBlocksWithHttpInfo(snapshotId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageToken, maxResults, startingBlockIndex, maxResults2, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about the blocks in an Amazon Elastic Block Store snapshot.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You should always retry requests that receive server (&lt;code&gt;5xx&lt;/code&gt;) error responses, and &lt;code&gt;ThrottlingException&lt;/code&gt; and &lt;code&gt;RequestThrottledException&lt;/code&gt; client error responses. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html\&quot;&gt;Error retries&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param snapshotId The ID of the snapshot from which to get block indexes and block tokens. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param pageToken &lt;p&gt;The token to request the next page of results.&lt;/p&gt; &lt;p&gt;If you specify &lt;b&gt;NextToken&lt;/b&gt;, then &lt;b&gt;StartingBlockIndex&lt;/b&gt; is ignored.&lt;/p&gt; (optional)
     * @param maxResults &lt;p&gt;The maximum number of blocks to be returned by the request.&lt;/p&gt; &lt;p&gt;Even if additional blocks can be retrieved from the snapshot, the request can return less blocks than &lt;b&gt;MaxResults&lt;/b&gt; or an empty array of blocks.&lt;/p&gt; &lt;p&gt;To retrieve the next set of blocks from the snapshot, make another request with the returned &lt;b&gt;NextToken&lt;/b&gt; value. The value of &lt;b&gt;NextToken&lt;/b&gt; is &lt;code&gt;null&lt;/code&gt; when there are no more blocks to return.&lt;/p&gt; (optional)
     * @param startingBlockIndex &lt;p&gt;The block index from which the list should start. The list in the response will start from this block index or the next valid block index in the snapshot.&lt;/p&gt; &lt;p&gt;If you specify &lt;b&gt;NextToken&lt;/b&gt;, then &lt;b&gt;StartingBlockIndex&lt;/b&gt; is ignored.&lt;/p&gt; (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListSnapshotBlocksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestThrottledException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSnapshotBlocksResponse> listSnapshotBlocksWithHttpInfo(@javax.annotation.Nonnull String snapshotId, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable Integer maxResults, @javax.annotation.Nullable Integer startingBlockIndex, @javax.annotation.Nullable String maxResults2, @javax.annotation.Nullable String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listSnapshotBlocksValidateBeforeCall(snapshotId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageToken, maxResults, startingBlockIndex, maxResults2, nextToken, null);
        Type localVarReturnType = new TypeToken<ListSnapshotBlocksResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about the blocks in an Amazon Elastic Block Store snapshot.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You should always retry requests that receive server (&lt;code&gt;5xx&lt;/code&gt;) error responses, and &lt;code&gt;ThrottlingException&lt;/code&gt; and &lt;code&gt;RequestThrottledException&lt;/code&gt; client error responses. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html\&quot;&gt;Error retries&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param snapshotId The ID of the snapshot from which to get block indexes and block tokens. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param pageToken &lt;p&gt;The token to request the next page of results.&lt;/p&gt; &lt;p&gt;If you specify &lt;b&gt;NextToken&lt;/b&gt;, then &lt;b&gt;StartingBlockIndex&lt;/b&gt; is ignored.&lt;/p&gt; (optional)
     * @param maxResults &lt;p&gt;The maximum number of blocks to be returned by the request.&lt;/p&gt; &lt;p&gt;Even if additional blocks can be retrieved from the snapshot, the request can return less blocks than &lt;b&gt;MaxResults&lt;/b&gt; or an empty array of blocks.&lt;/p&gt; &lt;p&gt;To retrieve the next set of blocks from the snapshot, make another request with the returned &lt;b&gt;NextToken&lt;/b&gt; value. The value of &lt;b&gt;NextToken&lt;/b&gt; is &lt;code&gt;null&lt;/code&gt; when there are no more blocks to return.&lt;/p&gt; (optional)
     * @param startingBlockIndex &lt;p&gt;The block index from which the list should start. The list in the response will start from this block index or the next valid block index in the snapshot.&lt;/p&gt; &lt;p&gt;If you specify &lt;b&gt;NextToken&lt;/b&gt;, then &lt;b&gt;StartingBlockIndex&lt;/b&gt; is ignored.&lt;/p&gt; (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestThrottledException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSnapshotBlocksAsync(@javax.annotation.Nonnull String snapshotId, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable Integer maxResults, @javax.annotation.Nullable Integer startingBlockIndex, @javax.annotation.Nullable String maxResults2, @javax.annotation.Nullable String nextToken, final ApiCallback<ListSnapshotBlocksResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSnapshotBlocksValidateBeforeCall(snapshotId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageToken, maxResults, startingBlockIndex, maxResults2, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListSnapshotBlocksResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSnapshotBlock
     * @param snapshotId &lt;p&gt;The ID of the snapshot.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If the specified snapshot is encrypted, you must have permission to use the KMS key that was used to encrypt the snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebsapis-using-encryption.html\&quot;&gt; Using encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;..&lt;/p&gt; &lt;/important&gt; (required)
     * @param blockIndex The block index of the block in which to write the data. A block index is a logical index in units of &lt;code&gt;512&lt;/code&gt; KiB blocks. To identify the block index, divide the logical offset of the data in the logical volume by the block size (logical offset of data/&lt;code&gt;524288&lt;/code&gt;). The logical offset of the data must be &lt;code&gt;512&lt;/code&gt; KiB aligned. (required)
     * @param xAmzDataLength &lt;p&gt;The size of the data to write to the block, in bytes. Currently, the only supported size is &lt;code&gt;524288&lt;/code&gt; bytes.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;524288&lt;/code&gt; &lt;/p&gt; (required)
     * @param xAmzChecksum A Base64-encoded SHA256 checksum of the data. Only SHA256 checksums are supported. (required)
     * @param xAmzChecksumAlgorithm The algorithm used to generate the checksum. Currently, the only supported algorithm is &lt;code&gt;SHA256&lt;/code&gt;. (required)
     * @param putSnapshotBlockRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzProgress The progress of the write process, as a percentage. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestThrottledException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSnapshotBlockCall(@javax.annotation.Nonnull String snapshotId, @javax.annotation.Nonnull Integer blockIndex, @javax.annotation.Nonnull Integer xAmzDataLength, @javax.annotation.Nonnull String xAmzChecksum, @javax.annotation.Nonnull String xAmzChecksumAlgorithm, @javax.annotation.Nonnull PutSnapshotBlockRequest putSnapshotBlockRequest, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable Integer xAmzProgress, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putSnapshotBlockRequest;

        // create path and map variables
        String localVarPath = "/snapshots/{snapshotId}/blocks/{blockIndex}#x-amz-Data-Length&x-amz-Checksum&x-amz-Checksum-Algorithm"
            .replace("{" + "snapshotId" + "}", localVarApiClient.escapeString(snapshotId.toString()))
            .replace("{" + "blockIndex" + "}", localVarApiClient.escapeString(blockIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzDataLength != null) {
            localVarHeaderParams.put("x-amz-Data-Length", localVarApiClient.parameterToString(xAmzDataLength));
        }


        if (xAmzProgress != null) {
            localVarHeaderParams.put("x-amz-Progress", localVarApiClient.parameterToString(xAmzProgress));
        }


        if (xAmzChecksum != null) {
            localVarHeaderParams.put("x-amz-Checksum", localVarApiClient.parameterToString(xAmzChecksum));
        }


        if (xAmzChecksumAlgorithm != null) {
            localVarHeaderParams.put("x-amz-Checksum-Algorithm", localVarApiClient.parameterToString(xAmzChecksumAlgorithm));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSnapshotBlockValidateBeforeCall(@javax.annotation.Nonnull String snapshotId, @javax.annotation.Nonnull Integer blockIndex, @javax.annotation.Nonnull Integer xAmzDataLength, @javax.annotation.Nonnull String xAmzChecksum, @javax.annotation.Nonnull String xAmzChecksumAlgorithm, @javax.annotation.Nonnull PutSnapshotBlockRequest putSnapshotBlockRequest, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable Integer xAmzProgress, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'snapshotId' is set
        if (snapshotId == null) {
            throw new ApiException("Missing the required parameter 'snapshotId' when calling putSnapshotBlock(Async)");
        }

        // verify the required parameter 'blockIndex' is set
        if (blockIndex == null) {
            throw new ApiException("Missing the required parameter 'blockIndex' when calling putSnapshotBlock(Async)");
        }

        // verify the required parameter 'xAmzDataLength' is set
        if (xAmzDataLength == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataLength' when calling putSnapshotBlock(Async)");
        }

        // verify the required parameter 'xAmzChecksum' is set
        if (xAmzChecksum == null) {
            throw new ApiException("Missing the required parameter 'xAmzChecksum' when calling putSnapshotBlock(Async)");
        }

        // verify the required parameter 'xAmzChecksumAlgorithm' is set
        if (xAmzChecksumAlgorithm == null) {
            throw new ApiException("Missing the required parameter 'xAmzChecksumAlgorithm' when calling putSnapshotBlock(Async)");
        }

        // verify the required parameter 'putSnapshotBlockRequest' is set
        if (putSnapshotBlockRequest == null) {
            throw new ApiException("Missing the required parameter 'putSnapshotBlockRequest' when calling putSnapshotBlock(Async)");
        }

        return putSnapshotBlockCall(snapshotId, blockIndex, xAmzDataLength, xAmzChecksum, xAmzChecksumAlgorithm, putSnapshotBlockRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzProgress, _callback);

    }

    /**
     * 
     * &lt;p&gt;Writes a block of data to a snapshot. If the specified block contains data, the existing data is overwritten. The target snapshot must be in the &lt;code&gt;pending&lt;/code&gt; state.&lt;/p&gt; &lt;p&gt;Data written to a snapshot must be aligned with 512-KiB sectors.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You should always retry requests that receive server (&lt;code&gt;5xx&lt;/code&gt;) error responses, and &lt;code&gt;ThrottlingException&lt;/code&gt; and &lt;code&gt;RequestThrottledException&lt;/code&gt; client error responses. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html\&quot;&gt;Error retries&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param snapshotId &lt;p&gt;The ID of the snapshot.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If the specified snapshot is encrypted, you must have permission to use the KMS key that was used to encrypt the snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebsapis-using-encryption.html\&quot;&gt; Using encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;..&lt;/p&gt; &lt;/important&gt; (required)
     * @param blockIndex The block index of the block in which to write the data. A block index is a logical index in units of &lt;code&gt;512&lt;/code&gt; KiB blocks. To identify the block index, divide the logical offset of the data in the logical volume by the block size (logical offset of data/&lt;code&gt;524288&lt;/code&gt;). The logical offset of the data must be &lt;code&gt;512&lt;/code&gt; KiB aligned. (required)
     * @param xAmzDataLength &lt;p&gt;The size of the data to write to the block, in bytes. Currently, the only supported size is &lt;code&gt;524288&lt;/code&gt; bytes.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;524288&lt;/code&gt; &lt;/p&gt; (required)
     * @param xAmzChecksum A Base64-encoded SHA256 checksum of the data. Only SHA256 checksums are supported. (required)
     * @param xAmzChecksumAlgorithm The algorithm used to generate the checksum. Currently, the only supported algorithm is &lt;code&gt;SHA256&lt;/code&gt;. (required)
     * @param putSnapshotBlockRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzProgress The progress of the write process, as a percentage. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestThrottledException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerException </td><td>  -  </td></tr>
     </table>
     */
    public Object putSnapshotBlock(@javax.annotation.Nonnull String snapshotId, @javax.annotation.Nonnull Integer blockIndex, @javax.annotation.Nonnull Integer xAmzDataLength, @javax.annotation.Nonnull String xAmzChecksum, @javax.annotation.Nonnull String xAmzChecksumAlgorithm, @javax.annotation.Nonnull PutSnapshotBlockRequest putSnapshotBlockRequest, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable Integer xAmzProgress) throws ApiException {
        ApiResponse<Object> localVarResp = putSnapshotBlockWithHttpInfo(snapshotId, blockIndex, xAmzDataLength, xAmzChecksum, xAmzChecksumAlgorithm, putSnapshotBlockRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzProgress);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Writes a block of data to a snapshot. If the specified block contains data, the existing data is overwritten. The target snapshot must be in the &lt;code&gt;pending&lt;/code&gt; state.&lt;/p&gt; &lt;p&gt;Data written to a snapshot must be aligned with 512-KiB sectors.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You should always retry requests that receive server (&lt;code&gt;5xx&lt;/code&gt;) error responses, and &lt;code&gt;ThrottlingException&lt;/code&gt; and &lt;code&gt;RequestThrottledException&lt;/code&gt; client error responses. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html\&quot;&gt;Error retries&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param snapshotId &lt;p&gt;The ID of the snapshot.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If the specified snapshot is encrypted, you must have permission to use the KMS key that was used to encrypt the snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebsapis-using-encryption.html\&quot;&gt; Using encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;..&lt;/p&gt; &lt;/important&gt; (required)
     * @param blockIndex The block index of the block in which to write the data. A block index is a logical index in units of &lt;code&gt;512&lt;/code&gt; KiB blocks. To identify the block index, divide the logical offset of the data in the logical volume by the block size (logical offset of data/&lt;code&gt;524288&lt;/code&gt;). The logical offset of the data must be &lt;code&gt;512&lt;/code&gt; KiB aligned. (required)
     * @param xAmzDataLength &lt;p&gt;The size of the data to write to the block, in bytes. Currently, the only supported size is &lt;code&gt;524288&lt;/code&gt; bytes.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;524288&lt;/code&gt; &lt;/p&gt; (required)
     * @param xAmzChecksum A Base64-encoded SHA256 checksum of the data. Only SHA256 checksums are supported. (required)
     * @param xAmzChecksumAlgorithm The algorithm used to generate the checksum. Currently, the only supported algorithm is &lt;code&gt;SHA256&lt;/code&gt;. (required)
     * @param putSnapshotBlockRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzProgress The progress of the write process, as a percentage. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestThrottledException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> putSnapshotBlockWithHttpInfo(@javax.annotation.Nonnull String snapshotId, @javax.annotation.Nonnull Integer blockIndex, @javax.annotation.Nonnull Integer xAmzDataLength, @javax.annotation.Nonnull String xAmzChecksum, @javax.annotation.Nonnull String xAmzChecksumAlgorithm, @javax.annotation.Nonnull PutSnapshotBlockRequest putSnapshotBlockRequest, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable Integer xAmzProgress) throws ApiException {
        okhttp3.Call localVarCall = putSnapshotBlockValidateBeforeCall(snapshotId, blockIndex, xAmzDataLength, xAmzChecksum, xAmzChecksumAlgorithm, putSnapshotBlockRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzProgress, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Writes a block of data to a snapshot. If the specified block contains data, the existing data is overwritten. The target snapshot must be in the &lt;code&gt;pending&lt;/code&gt; state.&lt;/p&gt; &lt;p&gt;Data written to a snapshot must be aligned with 512-KiB sectors.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You should always retry requests that receive server (&lt;code&gt;5xx&lt;/code&gt;) error responses, and &lt;code&gt;ThrottlingException&lt;/code&gt; and &lt;code&gt;RequestThrottledException&lt;/code&gt; client error responses. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html\&quot;&gt;Error retries&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param snapshotId &lt;p&gt;The ID of the snapshot.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If the specified snapshot is encrypted, you must have permission to use the KMS key that was used to encrypt the snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebsapis-using-encryption.html\&quot;&gt; Using encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;..&lt;/p&gt; &lt;/important&gt; (required)
     * @param blockIndex The block index of the block in which to write the data. A block index is a logical index in units of &lt;code&gt;512&lt;/code&gt; KiB blocks. To identify the block index, divide the logical offset of the data in the logical volume by the block size (logical offset of data/&lt;code&gt;524288&lt;/code&gt;). The logical offset of the data must be &lt;code&gt;512&lt;/code&gt; KiB aligned. (required)
     * @param xAmzDataLength &lt;p&gt;The size of the data to write to the block, in bytes. Currently, the only supported size is &lt;code&gt;524288&lt;/code&gt; bytes.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;524288&lt;/code&gt; &lt;/p&gt; (required)
     * @param xAmzChecksum A Base64-encoded SHA256 checksum of the data. Only SHA256 checksums are supported. (required)
     * @param xAmzChecksumAlgorithm The algorithm used to generate the checksum. Currently, the only supported algorithm is &lt;code&gt;SHA256&lt;/code&gt;. (required)
     * @param putSnapshotBlockRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzProgress The progress of the write process, as a percentage. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestThrottledException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSnapshotBlockAsync(@javax.annotation.Nonnull String snapshotId, @javax.annotation.Nonnull Integer blockIndex, @javax.annotation.Nonnull Integer xAmzDataLength, @javax.annotation.Nonnull String xAmzChecksum, @javax.annotation.Nonnull String xAmzChecksumAlgorithm, @javax.annotation.Nonnull PutSnapshotBlockRequest putSnapshotBlockRequest, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable Integer xAmzProgress, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSnapshotBlockValidateBeforeCall(snapshotId, blockIndex, xAmzDataLength, xAmzChecksum, xAmzChecksumAlgorithm, putSnapshotBlockRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzProgress, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startSnapshot
     * @param startSnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RequestThrottledException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConcurrentLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startSnapshotCall(@javax.annotation.Nonnull StartSnapshotRequest startSnapshotRequest, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startSnapshotRequest;

        // create path and map variables
        String localVarPath = "/snapshots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startSnapshotValidateBeforeCall(@javax.annotation.Nonnull StartSnapshotRequest startSnapshotRequest, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'startSnapshotRequest' is set
        if (startSnapshotRequest == null) {
            throw new ApiException("Missing the required parameter 'startSnapshotRequest' when calling startSnapshot(Async)");
        }

        return startSnapshotCall(startSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new Amazon EBS snapshot. The new snapshot enters the &lt;code&gt;pending&lt;/code&gt; state after the request completes. &lt;/p&gt; &lt;p&gt;After creating the snapshot, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ebs/latest/APIReference/API_PutSnapshotBlock.html\&quot;&gt; PutSnapshotBlock&lt;/a&gt; to write blocks of data to the snapshot.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You should always retry requests that receive server (&lt;code&gt;5xx&lt;/code&gt;) error responses, and &lt;code&gt;ThrottlingException&lt;/code&gt; and &lt;code&gt;RequestThrottledException&lt;/code&gt; client error responses. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html\&quot;&gt;Error retries&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param startSnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return StartSnapshotResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RequestThrottledException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConcurrentLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public StartSnapshotResponse startSnapshot(@javax.annotation.Nonnull StartSnapshotRequest startSnapshotRequest, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<StartSnapshotResponse> localVarResp = startSnapshotWithHttpInfo(startSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new Amazon EBS snapshot. The new snapshot enters the &lt;code&gt;pending&lt;/code&gt; state after the request completes. &lt;/p&gt; &lt;p&gt;After creating the snapshot, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ebs/latest/APIReference/API_PutSnapshotBlock.html\&quot;&gt; PutSnapshotBlock&lt;/a&gt; to write blocks of data to the snapshot.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You should always retry requests that receive server (&lt;code&gt;5xx&lt;/code&gt;) error responses, and &lt;code&gt;ThrottlingException&lt;/code&gt; and &lt;code&gt;RequestThrottledException&lt;/code&gt; client error responses. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html\&quot;&gt;Error retries&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param startSnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;StartSnapshotResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RequestThrottledException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConcurrentLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartSnapshotResponse> startSnapshotWithHttpInfo(@javax.annotation.Nonnull StartSnapshotRequest startSnapshotRequest, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = startSnapshotValidateBeforeCall(startSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<StartSnapshotResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new Amazon EBS snapshot. The new snapshot enters the &lt;code&gt;pending&lt;/code&gt; state after the request completes. &lt;/p&gt; &lt;p&gt;After creating the snapshot, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ebs/latest/APIReference/API_PutSnapshotBlock.html\&quot;&gt; PutSnapshotBlock&lt;/a&gt; to write blocks of data to the snapshot.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You should always retry requests that receive server (&lt;code&gt;5xx&lt;/code&gt;) error responses, and &lt;code&gt;ThrottlingException&lt;/code&gt; and &lt;code&gt;RequestThrottledException&lt;/code&gt; client error responses. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html\&quot;&gt;Error retries&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param startSnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RequestThrottledException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConcurrentLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startSnapshotAsync(@javax.annotation.Nonnull StartSnapshotRequest startSnapshotRequest, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<StartSnapshotResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = startSnapshotValidateBeforeCall(startSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<StartSnapshotResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
