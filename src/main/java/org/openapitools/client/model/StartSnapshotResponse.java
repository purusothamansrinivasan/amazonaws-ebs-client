/*
 * Amazon Elastic Block Store
 * <p>You can use the Amazon Elastic Block Store (Amazon EBS) direct APIs to create Amazon EBS snapshots, write data directly to your snapshots, read data on your snapshots, and identify the differences or changes between two snapshots. If youâ€™re an independent software vendor (ISV) who offers backup services for Amazon EBS, the EBS direct APIs make it more efficient and cost-effective to track incremental changes on your Amazon EBS volumes through snapshots. This can be done without having to create new volumes from snapshots, and then use Amazon Elastic Compute Cloud (Amazon EC2) instances to compare the differences.</p> <p>You can create incremental snapshots directly from data on-premises into volumes and the cloud to use for quick disaster recovery. With the ability to write and read snapshots, you can write your on-premises data to an snapshot during a disaster. Then after recovery, you can restore it back to Amazon Web Services or on-premises from the snapshot. You no longer need to build and maintain complex mechanisms to copy data to and from Amazon EBS.</p> <p>This API reference provides detailed information about the actions, data types, parameters, and errors of the EBS direct APIs. For more information about the elements that make up the EBS direct APIs, and examples of how to use them effectively, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-accessing-snapshot.html\">Accessing the Contents of an Amazon EBS Snapshot</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas for the EBS direct APIs, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ebs-service.html\">Amazon Elastic Block Store Endpoints and Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2019-11-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SSEType;
import org.openapitools.client.model.Status;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartSnapshotResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:56:00.934756+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class StartSnapshotResponse {
  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_SNAPSHOT_ID = "SnapshotId";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_ID)
  @javax.annotation.Nullable
  private String snapshotId;

  public static final String SERIALIZED_NAME_OWNER_ID = "OwnerId";
  @SerializedName(SERIALIZED_NAME_OWNER_ID)
  @javax.annotation.Nullable
  private String ownerId;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private Status status;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_VOLUME_SIZE = "VolumeSize";
  @SerializedName(SERIALIZED_NAME_VOLUME_SIZE)
  @javax.annotation.Nullable
  private Integer volumeSize;

  public static final String SERIALIZED_NAME_BLOCK_SIZE = "BlockSize";
  @SerializedName(SERIALIZED_NAME_BLOCK_SIZE)
  @javax.annotation.Nullable
  private Integer blockSize;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<Tag> tags;

  public static final String SERIALIZED_NAME_PARENT_SNAPSHOT_ID = "ParentSnapshotId";
  @SerializedName(SERIALIZED_NAME_PARENT_SNAPSHOT_ID)
  @javax.annotation.Nullable
  private String parentSnapshotId;

  public static final String SERIALIZED_NAME_KMS_KEY_ARN = "KmsKeyArn";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_ARN)
  @javax.annotation.Nullable
  private String kmsKeyArn;

  public static final String SERIALIZED_NAME_SSE_TYPE = "SseType";
  @SerializedName(SERIALIZED_NAME_SSE_TYPE)
  @javax.annotation.Nullable
  private SSEType sseType;

  public StartSnapshotResponse() {
  }

  public StartSnapshotResponse description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the snapshot.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public StartSnapshotResponse snapshotId(@javax.annotation.Nullable String snapshotId) {
    this.snapshotId = snapshotId;
    return this;
  }

  /**
   * The ID of the snapshot.
   * @return snapshotId
   */
  @javax.annotation.Nullable
  public String getSnapshotId() {
    return snapshotId;
  }

  public void setSnapshotId(@javax.annotation.Nullable String snapshotId) {
    this.snapshotId = snapshotId;
  }


  public StartSnapshotResponse ownerId(@javax.annotation.Nullable String ownerId) {
    this.ownerId = ownerId;
    return this;
  }

  /**
   * The Amazon Web Services account ID of the snapshot owner.
   * @return ownerId
   */
  @javax.annotation.Nullable
  public String getOwnerId() {
    return ownerId;
  }

  public void setOwnerId(@javax.annotation.Nullable String ownerId) {
    this.ownerId = ownerId;
  }


  public StartSnapshotResponse status(@javax.annotation.Nullable Status status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the snapshot.
   * @return status
   */
  @javax.annotation.Nullable
  public Status getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable Status status) {
    this.status = status;
  }


  public StartSnapshotResponse startTime(@javax.annotation.Nullable OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The timestamp when the snapshot was created.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(@javax.annotation.Nullable OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public StartSnapshotResponse volumeSize(@javax.annotation.Nullable Integer volumeSize) {
    this.volumeSize = volumeSize;
    return this;
  }

  /**
   * The size of the volume, in GiB.
   * minimum: 1
   * @return volumeSize
   */
  @javax.annotation.Nullable
  public Integer getVolumeSize() {
    return volumeSize;
  }

  public void setVolumeSize(@javax.annotation.Nullable Integer volumeSize) {
    this.volumeSize = volumeSize;
  }


  public StartSnapshotResponse blockSize(@javax.annotation.Nullable Integer blockSize) {
    this.blockSize = blockSize;
    return this;
  }

  /**
   * The size of the blocks in the snapshot, in bytes.
   * @return blockSize
   */
  @javax.annotation.Nullable
  public Integer getBlockSize() {
    return blockSize;
  }

  public void setBlockSize(@javax.annotation.Nullable Integer blockSize) {
    this.blockSize = blockSize;
  }


  public StartSnapshotResponse tags(@javax.annotation.Nullable List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public StartSnapshotResponse addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * The tags applied to the snapshot. You can specify up to 50 tags per snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html\&quot;&gt; Tagging your Amazon EC2 resources&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<Tag> tags) {
    this.tags = tags;
  }


  public StartSnapshotResponse parentSnapshotId(@javax.annotation.Nullable String parentSnapshotId) {
    this.parentSnapshotId = parentSnapshotId;
    return this;
  }

  /**
   * The ID of the parent snapshot.
   * @return parentSnapshotId
   */
  @javax.annotation.Nullable
  public String getParentSnapshotId() {
    return parentSnapshotId;
  }

  public void setParentSnapshotId(@javax.annotation.Nullable String parentSnapshotId) {
    this.parentSnapshotId = parentSnapshotId;
  }


  public StartSnapshotResponse kmsKeyArn(@javax.annotation.Nullable String kmsKeyArn) {
    this.kmsKeyArn = kmsKeyArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of the Key Management Service (KMS) key used to encrypt the snapshot.
   * @return kmsKeyArn
   */
  @javax.annotation.Nullable
  public String getKmsKeyArn() {
    return kmsKeyArn;
  }

  public void setKmsKeyArn(@javax.annotation.Nullable String kmsKeyArn) {
    this.kmsKeyArn = kmsKeyArn;
  }


  public StartSnapshotResponse sseType(@javax.annotation.Nullable SSEType sseType) {
    this.sseType = sseType;
    return this;
  }

  /**
   * Reserved for future use.
   * @return sseType
   */
  @javax.annotation.Nullable
  public SSEType getSseType() {
    return sseType;
  }

  public void setSseType(@javax.annotation.Nullable SSEType sseType) {
    this.sseType = sseType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartSnapshotResponse startSnapshotResponse = (StartSnapshotResponse) o;
    return Objects.equals(this.description, startSnapshotResponse.description) &&
        Objects.equals(this.snapshotId, startSnapshotResponse.snapshotId) &&
        Objects.equals(this.ownerId, startSnapshotResponse.ownerId) &&
        Objects.equals(this.status, startSnapshotResponse.status) &&
        Objects.equals(this.startTime, startSnapshotResponse.startTime) &&
        Objects.equals(this.volumeSize, startSnapshotResponse.volumeSize) &&
        Objects.equals(this.blockSize, startSnapshotResponse.blockSize) &&
        Objects.equals(this.tags, startSnapshotResponse.tags) &&
        Objects.equals(this.parentSnapshotId, startSnapshotResponse.parentSnapshotId) &&
        Objects.equals(this.kmsKeyArn, startSnapshotResponse.kmsKeyArn) &&
        Objects.equals(this.sseType, startSnapshotResponse.sseType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, snapshotId, ownerId, status, startTime, volumeSize, blockSize, tags, parentSnapshotId, kmsKeyArn, sseType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartSnapshotResponse {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    snapshotId: ").append(toIndentedString(snapshotId)).append("\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    volumeSize: ").append(toIndentedString(volumeSize)).append("\n");
    sb.append("    blockSize: ").append(toIndentedString(blockSize)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    parentSnapshotId: ").append(toIndentedString(parentSnapshotId)).append("\n");
    sb.append("    kmsKeyArn: ").append("*").append("\n");
    sb.append("    sseType: ").append(toIndentedString(sseType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("Description", "SnapshotId", "OwnerId", "Status", "StartTime", "VolumeSize", "BlockSize", "Tags", "ParentSnapshotId", "KmsKeyArn", "SseType"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartSnapshotResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartSnapshotResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartSnapshotResponse is not found in the empty JSON string", StartSnapshotResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartSnapshotResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartSnapshotResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("SnapshotId") != null && !jsonObj.get("SnapshotId").isJsonNull()) && !jsonObj.get("SnapshotId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SnapshotId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SnapshotId").toString()));
      }
      if ((jsonObj.get("OwnerId") != null && !jsonObj.get("OwnerId").isJsonNull()) && !jsonObj.get("OwnerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OwnerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OwnerId").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("Status"));
      }
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
          }

          // validate the optional field `Tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if ((jsonObj.get("ParentSnapshotId") != null && !jsonObj.get("ParentSnapshotId").isJsonNull()) && !jsonObj.get("ParentSnapshotId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ParentSnapshotId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ParentSnapshotId").toString()));
      }
      if ((jsonObj.get("KmsKeyArn") != null && !jsonObj.get("KmsKeyArn").isJsonNull()) && !jsonObj.get("KmsKeyArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `KmsKeyArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("KmsKeyArn").toString()));
      }
      // validate the optional field `SseType`
      if (jsonObj.get("SseType") != null && !jsonObj.get("SseType").isJsonNull()) {
        SSEType.validateJsonElement(jsonObj.get("SseType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartSnapshotResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartSnapshotResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartSnapshotResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartSnapshotResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<StartSnapshotResponse>() {
           @Override
           public void write(JsonWriter out, StartSnapshotResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartSnapshotResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartSnapshotResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartSnapshotResponse
   * @throws IOException if the JSON string is invalid with respect to StartSnapshotResponse
   */
  public static StartSnapshotResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartSnapshotResponse.class);
  }

  /**
   * Convert an instance of StartSnapshotResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

