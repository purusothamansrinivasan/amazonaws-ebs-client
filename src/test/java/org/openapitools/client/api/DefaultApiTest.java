/*
 * Amazon Elastic Block Store
 * <p>You can use the Amazon Elastic Block Store (Amazon EBS) direct APIs to create Amazon EBS snapshots, write data directly to your snapshots, read data on your snapshots, and identify the differences or changes between two snapshots. If youâ€™re an independent software vendor (ISV) who offers backup services for Amazon EBS, the EBS direct APIs make it more efficient and cost-effective to track incremental changes on your Amazon EBS volumes through snapshots. This can be done without having to create new volumes from snapshots, and then use Amazon Elastic Compute Cloud (Amazon EC2) instances to compare the differences.</p> <p>You can create incremental snapshots directly from data on-premises into volumes and the cloud to use for quick disaster recovery. With the ability to write and read snapshots, you can write your on-premises data to an snapshot during a disaster. Then after recovery, you can restore it back to Amazon Web Services or on-premises from the snapshot. You no longer need to build and maintain complex mechanisms to copy data to and from Amazon EBS.</p> <p>This API reference provides detailed information about the actions, data types, parameters, and errors of the EBS direct APIs. For more information about the elements that make up the EBS direct APIs, and examples of how to use them effectively, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-accessing-snapshot.html\">Accessing the Contents of an Amazon EBS Snapshot</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas for the EBS direct APIs, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ebs-service.html\">Amazon Elastic Block Store Endpoints and Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2019-11-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CompleteSnapshotResponse;
import org.openapitools.client.model.GetSnapshotBlockResponse;
import org.openapitools.client.model.ListChangedBlocksResponse;
import org.openapitools.client.model.ListSnapshotBlocksResponse;
import org.openapitools.client.model.PutSnapshotBlockRequest;
import org.openapitools.client.model.StartSnapshotRequest;
import org.openapitools.client.model.StartSnapshotResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Seals and completes the snapshot after all of the required blocks of data have been written to it. Completing the snapshot changes the status to &lt;code&gt;completed&lt;/code&gt;. You cannot write new blocks to a snapshot after it has been completed.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You should always retry requests that receive server (&lt;code&gt;5xx&lt;/code&gt;) error responses, and &lt;code&gt;ThrottlingException&lt;/code&gt; and &lt;code&gt;RequestThrottledException&lt;/code&gt; client error responses. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html\&quot;&gt;Error retries&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void completeSnapshotTest() throws ApiException {
        String snapshotId = null;
        Integer xAmzChangedBlocksCount = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzChecksum = null;
        String xAmzChecksumAlgorithm = null;
        String xAmzChecksumAggregationMethod = null;
        CompleteSnapshotResponse response = api.completeSnapshot(snapshotId, xAmzChangedBlocksCount, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChecksum, xAmzChecksumAlgorithm, xAmzChecksumAggregationMethod);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the data in a block in an Amazon Elastic Block Store snapshot.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You should always retry requests that receive server (&lt;code&gt;5xx&lt;/code&gt;) error responses, and &lt;code&gt;ThrottlingException&lt;/code&gt; and &lt;code&gt;RequestThrottledException&lt;/code&gt; client error responses. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html\&quot;&gt;Error retries&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSnapshotBlockTest() throws ApiException {
        String snapshotId = null;
        Integer blockIndex = null;
        String blockToken = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSnapshotBlockResponse response = api.getSnapshotBlock(snapshotId, blockIndex, blockToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about the blocks that are different between two Amazon Elastic Block Store snapshots of the same volume/snapshot lineage.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You should always retry requests that receive server (&lt;code&gt;5xx&lt;/code&gt;) error responses, and &lt;code&gt;ThrottlingException&lt;/code&gt; and &lt;code&gt;RequestThrottledException&lt;/code&gt; client error responses. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html\&quot;&gt;Error retries&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listChangedBlocksTest() throws ApiException {
        String secondSnapshotId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String firstSnapshotId = null;
        String pageToken = null;
        Integer maxResults = null;
        Integer startingBlockIndex = null;
        String maxResults2 = null;
        String nextToken = null;
        ListChangedBlocksResponse response = api.listChangedBlocks(secondSnapshotId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, firstSnapshotId, pageToken, maxResults, startingBlockIndex, maxResults2, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about the blocks in an Amazon Elastic Block Store snapshot.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You should always retry requests that receive server (&lt;code&gt;5xx&lt;/code&gt;) error responses, and &lt;code&gt;ThrottlingException&lt;/code&gt; and &lt;code&gt;RequestThrottledException&lt;/code&gt; client error responses. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html\&quot;&gt;Error retries&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSnapshotBlocksTest() throws ApiException {
        String snapshotId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageToken = null;
        Integer maxResults = null;
        Integer startingBlockIndex = null;
        String maxResults2 = null;
        String nextToken = null;
        ListSnapshotBlocksResponse response = api.listSnapshotBlocks(snapshotId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageToken, maxResults, startingBlockIndex, maxResults2, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Writes a block of data to a snapshot. If the specified block contains data, the existing data is overwritten. The target snapshot must be in the &lt;code&gt;pending&lt;/code&gt; state.&lt;/p&gt; &lt;p&gt;Data written to a snapshot must be aligned with 512-KiB sectors.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You should always retry requests that receive server (&lt;code&gt;5xx&lt;/code&gt;) error responses, and &lt;code&gt;ThrottlingException&lt;/code&gt; and &lt;code&gt;RequestThrottledException&lt;/code&gt; client error responses. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html\&quot;&gt;Error retries&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSnapshotBlockTest() throws ApiException {
        String snapshotId = null;
        Integer blockIndex = null;
        Integer xAmzDataLength = null;
        String xAmzChecksum = null;
        String xAmzChecksumAlgorithm = null;
        PutSnapshotBlockRequest putSnapshotBlockRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer xAmzProgress = null;
        Object response = api.putSnapshotBlock(snapshotId, blockIndex, xAmzDataLength, xAmzChecksum, xAmzChecksumAlgorithm, putSnapshotBlockRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzProgress);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new Amazon EBS snapshot. The new snapshot enters the &lt;code&gt;pending&lt;/code&gt; state after the request completes. &lt;/p&gt; &lt;p&gt;After creating the snapshot, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ebs/latest/APIReference/API_PutSnapshotBlock.html\&quot;&gt; PutSnapshotBlock&lt;/a&gt; to write blocks of data to the snapshot.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You should always retry requests that receive server (&lt;code&gt;5xx&lt;/code&gt;) error responses, and &lt;code&gt;ThrottlingException&lt;/code&gt; and &lt;code&gt;RequestThrottledException&lt;/code&gt; client error responses. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html\&quot;&gt;Error retries&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startSnapshotTest() throws ApiException {
        StartSnapshotRequest startSnapshotRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartSnapshotResponse response = api.startSnapshot(startSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
